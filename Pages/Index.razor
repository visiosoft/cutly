@page "/"
@inject IUrlShortenerService UrlService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Cutly - URL Shortener</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-body">
                    <h1 class="text-center mb-4">Cutly URL Shortener</h1>
                    
                    <div class="mb-4">
                        <div class="input-group">
                            <input @bind="longUrl" 
                                   @bind:event="oninput"
                                   class="form-control" 
                                   placeholder="Enter your long URL here" />
                            <button class="btn btn-primary" 
                                    @onclick="ShortenUrl" 
                                    disabled="@(!IsValidUrl)">
                                Shorten URL
                            </button>
                        </div>
                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="text-danger mt-2">@errorMessage</div>
                        }
                    </div>

                    @if (!string.IsNullOrEmpty(shortenedUrl))
                    {
                        <div class="alert alert-success">
                            <h5>Your shortened URL:</h5>
                            <div class="input-group">
                                <input type="text" 
                                       class="form-control" 
                                       value="@shortenedUrl" 
                                       readonly />
                                <button class="btn btn-outline-secondary" 
                                        @onclick="CopyToClipboard">
                                    Copy
                                </button>
                            </div>
                        </div>
                    }
                </div>
            </div>

            @if (recentUrls?.Any() == true)
            {
                <div class="card mt-4">
                    <div class="card-body">
                        <h2 class="text-center mb-4">Recent URLs</h2>
                        <div class="table-responsive">
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>Short URL</th>
                                        <th>Original URL</th>
                                        <th>Clicks</th>
                                        <th>Created</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var url in recentUrls)
                                    {
                                        <tr>
                                            <td>
                                                <a href="@url.ShortUrl" target="_blank">@url.ShortUrl</a>
                                            </td>
                                            <td>
                                                <a href="@url.LongUrl" target="_blank">@url.LongUrl</a>
                                            </td>
                                            <td>@url.ClickCount</td>
                                            <td>@url.CreatedAt.ToString("g")</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private string longUrl = string.Empty;
    private string shortenedUrl = string.Empty;
    private string errorMessage = string.Empty;
    private IEnumerable<ShortenedUrl>? recentUrls;

    protected override async Task OnInitializedAsync()
    {
        await LoadRecentUrls();
    }

    private bool IsValidUrl => Uri.TryCreate(longUrl, UriKind.Absolute, out _);

    private async Task ShortenUrl()
    {
        try
        {
            errorMessage = string.Empty;
            var result = await UrlService.ShortenUrlAsync(longUrl);
            shortenedUrl = result.ShortUrl;
            await LoadRecentUrls();
        }
        catch (Exception)
        {
            errorMessage = "Failed to shorten URL. Please try again.";
        }
    }

    private async Task LoadRecentUrls()
    {
        try
        {
            recentUrls = await UrlService.GetRecentUrlsAsync();
        }
        catch (Exception)
        {
            recentUrls = Enumerable.Empty<ShortenedUrl>();
        }
    }

    private void CopyToClipboard()
    {
        NavigationManager.NavigateTo($"copy?url={Uri.EscapeDataString(shortenedUrl)}");
    }
} 